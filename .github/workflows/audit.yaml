name: Audit

on:
  push:
    branches: [main]
    paths:
      - 'server/**'
  pull_request:
    branches: [main]
    paths:
      - 'server/**'

jobs:
  audit:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.1'
        check-latest: true
        cache: true

    - name: Verify dependencies
      working-directory: ./server
      run: go mod verify

    - name: Go Format Check
      working-directory: ./server
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          gofmt -s -l .
          echo "Code is not properly formatted. Please run 'gofmt -s -w .'"
          exit 1
        fi

    - name: Build
      working-directory: ./server
      run: go build -v ./...

    - name: Run go vet
      working-directory: ./server
      run: go vet ./...

    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest

    - name: Run staticcheck
      working-directory: ./server
      run: staticcheck ./...

    - name: Install gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest

    - name: Run gosec security scanner
      working-directory: ./server
      run: gosec -quiet -exclude-dir=vendor -exclude-generated -skip-files=internal/seed ./...

    - name: Run tests with coverage
      working-directory: ./server
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Display coverage
      working-directory: ./server
      run: go tool cover -func=coverage.out

    - name: Vulnerability check
      uses: golang/govulncheck-action@v1
      with:
        go-version-input: '1.24.1'
        go-package: ./server/...

    - name: Lint workflow file
      uses: reviewdog/action-actionlint@v1
